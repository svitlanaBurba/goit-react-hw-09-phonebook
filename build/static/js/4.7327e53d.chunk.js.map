{"version":3,"sources":["views/homeView/HomeViewStyled.js","../node_modules/uuid/dist/esm-browser/rng.js","components/contactForm/ContactFormStyled.js","redux/contacts/contacts-selectors.js","components/filter/Filter.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","components/contactListItem/ContactListItemStyled.js","components/contactListItem/ContactListItem.js","components/contactList/ContactList.js","redux/contacts/contacts-operations.js","components/contactForm/ContactForm.js","views/contactsView/ContactsViewStyled.js","views/contactsView/ContactsView.js"],"names":["HomeViewContainer","styled","div","getRandomValues","ContactFormContainer","form","InputContainer","input","LabelContainer","label","ButtonContainer","button","getLoading","state","contacts","loading","getContacts","getFilter","filter","getFilteredContacts","createSelector","allContacts","console","log","contact","name","toLowerCase","includes","trim","mapDispatchToProps","handleChange","connect","htmlFor","id","type","onChange","event","target","value","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","TypeError","v4","options","buf","rnds","random","ContactListItemContainer","li","ContactListItem","number","deleteContact","className","onClick","ContactList","this","props","fetchContacts","isLoadingContacts","map","Component","dispatch","deleteRequest","axios","delete","then","deleteSuccess","catch","error","deleteError","message","a","fetchRequest","get","data","fetchSuccess","fetchError","ContactForm","setState","handleSubmit","preventDefault","some","alert","addNewContact","onSubmit","pattern","title","required","inputData","addRequest","post","addSuccess","addError","ContactsViewContainer","ContactsView"],"mappings":"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","file":"static/js/4.7327e53d.chunk.js","sourcesContent":["import styled from 'styled-components';\r\nexport const HomeViewContainer = styled.div`\r\n  padding: 4vw 2vw 0;\r\n  font-size: 2vw;\r\n  color: #3f51b5;\r\n  text-align: center;\r\n  font-weight: 700;\r\n`;\r\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import styled from 'styled-components';\r\nexport const ContactFormContainer = styled.form`\r\n  width: 50vw;\r\n  padding: 16px;\r\n  border: 1px solid rgba(0, 0, 0, 0.23);\r\n  border-radius: 4px;\r\n  margin-top: 20px;\r\n  margin-bottom: 20px;\r\n  background-color: rgb(232, 240, 254);\r\n`;\r\n\r\nexport const InputContainer = styled.input`\r\n  display: block;\r\n  min-width: 300px;\r\n  padding: 5px 10px;\r\n  margin-bottom: 15px;\r\n  border: 1px solid lightgrey;\r\n  border-radius: 4px;\r\n  :focus {\r\n    outline: none;\r\n    border: 2px solid #3f51b5;\r\n  }\r\n`;\r\n\r\nexport const LabelContainer = styled.label`\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-size: 18px;\r\n`;\r\n\r\nexport const ButtonContainer = styled.button`\r\n  display: inline-block;\r\n  text-align: center;\r\n  padding: 5px 20px;\r\n  min-width: 150px;\r\n  background-color: #3f51b5;\r\n  color: #ffffff;\r\n  box-shadow: 0px 3px 1px -2px rgb(0 0 0 / 20%),\r\n    0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%);\r\n  text-decoration: none;\r\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,\r\n    border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\r\n  font-family: 'Roboto', 'Helvetica', 'Arial', sans-serif;\r\n  font-weight: 500;\r\n  line-height: 1.75;\r\n  border-radius: 4px;\r\n  letter-spacing: 0.02857em;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  border: none;\r\n\r\n  :hover {\r\n    background-image: linear-gradient(to bottom, #3f51b5, #070c73);\r\n    text-decoration: none;\r\n  }\r\n`;\r\n","import {createSelector} from 'reselect';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\nexport const getContacts = state => state.contacts.contacts;\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\n//Селектор до использования мемоизации (оставлено для примера)\r\n// export const getFilteredContacts = state => {\r\n//   console.log('Перерендер интерфейса');\r\n//   const allContacts = getContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return allContacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(filter.toLowerCase().trim())\r\n//   );\r\n// };\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    console.log('Перерендер интерфейса');\r\n    return allContacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase().trim())\r\n    );\r\n  }\r\n);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {InputContainer, LabelContainer} from '../contactForm/ContactFormStyled';\r\nimport {getFilter} from '../../redux/contacts';\r\nimport {handleChange} from '../../redux/contacts/contacts-actions';\r\n\r\nconst Filter = ({filter, handleChange}) => {\r\n  return (\r\n    <>\r\n      <LabelContainer htmlFor=\"filter\">Find contacts by name</LabelContainer>\r\n      <InputContainer\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        onChange={event => {\r\n          return handleChange(event.target.value);\r\n        }}\r\n        name=\"filter\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: getFilter(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  handleChange\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import styled from 'styled-components';\r\n\r\nexport const ContactListItemContainer = styled.li`\r\n  margin-bottom: 10px;\r\n  .contactListItemText {\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    font-size: 18px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {ButtonContainer} from '../contactForm/ContactFormStyled';\r\nimport {ContactListItemContainer} from './ContactListItemStyled';\r\n\r\nconst ContactListItem = ({name, number, deleteContact}) => {\r\n  return (\r\n    <ContactListItemContainer>\r\n      <p className=\"contactListItemText\">\r\n        {name}: {number}\r\n      </p>\r\n      <ButtonContainer type=\"button\" onClick={deleteContact}>\r\n        Delete\r\n      </ButtonContainer>\r\n    </ContactListItemContainer>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {v4 as uuid} from 'uuid';\r\nimport {connect} from 'react-redux';\r\n\r\nimport ContactListItem from '../contactListItem/ContactListItem';\r\n\r\nimport {\r\n  deleteContact,\r\n  fetchContacts,\r\n  getFilteredContacts,\r\n  getLoading\r\n} from '../../redux/contacts';\r\n\r\nclass ContactList extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {this.props.isLoadingContacts && <h2>Loading...</h2>}\r\n        {this.props.contacts.map(contact => (\r\n          <ContactListItem\r\n            name={contact.name}\r\n            number={contact.number}\r\n            key={uuid()}\r\n            deleteContact={() => this.props.deleteContact(contact.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  deleteContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired\r\n    })\r\n  )\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getFilteredContacts(state),\r\n    isLoadingContacts: getLoading(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {deleteContact, fetchContacts};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import axios from 'axios';\r\nimport {\r\n  fetchRequest,\r\n  fetchSuccess,\r\n  fetchError,\r\n  addRequest,\r\n  addSuccess,\r\n  addError,\r\n  deleteRequest,\r\n  deleteSuccess,\r\n  deleteError\r\n} from './contacts-actions';\r\n\r\n// axios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchRequest());\r\n  try {\r\n    const {data} = await axios.get('/contacts');\r\n\r\n    dispatch(fetchSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchError(error.message));\r\n  }\r\n};\r\n\r\nexport const addNewContact = inputData => dispatch => {\r\n  dispatch(addRequest());\r\n  axios\r\n    .post('/contacts', inputData)\r\n    .then(({data}) => dispatch(addSuccess(data)))\r\n    .catch(error => dispatch(addError(error.message)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteRequest());\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteSuccess(id)))\r\n    .catch(error => dispatch(deleteError(error.message)));\r\n};\r\n\r\n//export default {addNewContact, deleteContact};\r\n","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {\r\n  ButtonContainer,\r\n  ContactFormContainer,\r\n  InputContainer,\r\n  LabelContainer\r\n} from './ContactFormStyled';\r\n\r\nimport {addNewContact, getContacts} from '../../redux/contacts';\r\n\r\nclass ContactForm extends Component {\r\n  state = {name: '', number: ''};\r\n\r\n  handleChange = event => {\r\n    this.setState({[event.target.name]: event.target.value});\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    if (this.props.contacts.some(contact => contact.name === this.state.name)) {\r\n      alert(`${this.state.name} is already in contacts.`);\r\n      return;\r\n    }\r\n\r\n    this.props.addNewContact({\r\n      name: this.state.name,\r\n      number: this.state.number\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ContactFormContainer onSubmit={this.handleSubmit}>\r\n        <LabelContainer htmlFor=\"name\">Name</LabelContainer>\r\n        <InputContainer\r\n          type=\"text\"\r\n          id=\"name\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n          value={this.state.name}\r\n        />\r\n        <LabelContainer htmlFor=\"number\">Number</LabelContainer>\r\n        <InputContainer\r\n          type=\"tel\"\r\n          id=\"number\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          value={this.state.value}\r\n        />\r\n        <ButtonContainer type=\"submit\">Add contact</ButtonContainer>\r\n      </ContactFormContainer>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  // console.log('Contacts form - mapstate');\r\n  // console.dir(state);\r\n  return {\r\n    contacts: getContacts(state)\r\n  };\r\n};\r\n\r\n// Решение до Redux Toolkit, оставила для сравнения\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addNewContact: contact => dispatch(addNewContact(contact))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import styled from 'styled-components';\r\nexport const ContactsViewContainer = styled.div`\r\n  h2 {\r\n    padding: 1vh 0 0.5vh;\r\n    color: #3f51b5;\r\n    font-weight: 700;\r\n  }\r\n`;\r\n","import Filter from '../../components/filter/Filter';\r\nimport ContactList from '../../components/contactList/ContactList';\r\nimport ContactForm from '../../components/contactForm/ContactForm';\r\nimport {ContactsViewContainer} from './ContactsViewStyled';\r\nimport {HomeViewContainer} from '../homeView/HomeViewStyled';\r\n\r\nconst ContactsView = () => (\r\n  <ContactsViewContainer>\r\n    <HomeViewContainer>\r\n      <h1>Phonebook</h1>\r\n    </HomeViewContainer>\r\n    <ContactForm />\r\n\r\n    <h2>Contacts</h2>\r\n    <Filter />\r\n    <ContactList />\r\n  </ContactsViewContainer>\r\n);\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}